{
  "openapi": "3.0.1",
  "info": {
    "title": "Rest PKI Core API",
    "description": "<b><i>Para PortuguÃªs, <a href=\"https://docs.lacunasoftware.com/pt-br/articles/rest-pki/core/integration/get-started\">clique aqui</a></i></b>\r\n<p>\r\n\t<a href=\"https://docs.lacunasoftware.com/en-us/articles/rest-pki/core/\">Rest PKI Core</a> is an upcoming version of\r\n\t<a href=\"https://docs.lacunasoftware.com/en-us/articles/rest-pki/\">Rest PKI</a> that will have extended compatibility with environments and databases.\r\n</p>\r\n<p>\r\n\tIn addition to Windows Server (which is already supported by Rest PKI), Rest PKI Core will also run on <b>Linux</b> (Debian- and RedHat-based distributions)\r\n\tand on <b>Docker</b>. As for database servers, in addition to SQL Server, <b>PostgreSQL</b> will also be supported.\r\n</p>\r\n<p>\r\n\t<b>Before getting started, see the integration overview on the <a href=\"https://docs.lacunasoftware.com/en-us/articles/rest-pki/core/integration/\">Integration Guide</a></b>\r\n</p>\r\n<p>\r\n\tFor questions regarding the usage of this API, please reach us at <a href=\"https://lacuna.help/\">lacuna.help</a>\r\n</p>\r\n\r\n<h2>Parameters</h2>\r\n<p>\r\n\tYou will need the following parameters:\r\n</p>\r\n<ul>\r\n\t<li><b>Endpoint</b>: address of the Rest PKI Core instance that will be used</li>\r\n\t<li><b>API Key</b>: authorization key for using the API</li>\r\n</ul>\r\n<p>\r\n\tThe <span class=\"model\">endpoint</span> must be prefixed to all relative URLs mentioned here. As for the <span class=\"model\">API Key</span>, see how to use it below.\r\n</p>\r\n\r\n<h2>Authentication</h2>\r\n<p>\r\n\tThe API key must be sent on the <span class=\"model\">X-Api-Key</span> header on each request:\r\n</p>\r\n\r\n<!-- unfortunately, class \"example microlight\" doesn't seem to work here -->\r\n<pre style=\"font-size: 12px; padding: 10px; border-radius: 4px; background: #41444e; font-weight: 600; color: #fff;\">\r\nX-Api-Key: yourapp|xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\r\n</pre>\r\n\r\n<h2>HTTP Codes</h2>\r\n\r\n<p>\r\n\tThe APIs will return the following HTTP codes:\r\n</p>\r\n\r\n<table>\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th>Code</th>\r\n\t\t\t<th>Description</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td><strong class=\"model-title\">200 (OK)</strong></td>\r\n\t\t\t<td>Request processed successfully. The response is different for each API, please refer to the operation's documentation</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><strong class=\"model-title\">400 (Bad Request)</strong></td>\r\n\t\t\t<td>Syntax error. For instance, when a required field was not provided</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><strong class=\"model-title\">401 (Unauthorized)</strong></td>\r\n\t\t\t<td>API key not provided or invalid</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><strong class=\"model-title\">403 (Forbidden)</strong></td>\r\n\t\t\t<td>API key is valid, but the application has insufficient permissions to complete the requested operation</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><strong class=\"model-title\">422 (Unprocessable Entity)</strong></td>\r\n\t\t\t<td>API error. The response body is an <a href=\"#model-ErrorModelV2\" class=\"model\">ErrorModelV2</a>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><strong class=\"model-title\">500 (Internal Server Error)</strong></td>\r\n\t\t\t<td>An unexpected error occurred. The <span class=\"model\">exceptionCode</span> contained on the response body may be of help for our support team during diagnostic.</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<h3>Error Codes</h3>\r\n\r\n<p>\r\n\tSome of the error codes returned in the <span class=\"model\">code</span> field of an <a href=\"#model-ErrorModelV2\" class=\"model\">ErrorModelV2</a>\r\n\t(body of responses with HTTP status code 422) are provided below*:\r\n</p>\r\n\r\n<table>\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th>Code</th>\r\n\t\t\t<th>Description</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td class=\"model\">DocumentNotFound</td>\r\n\t\t\t<td>A referenced document was not found (check the document ID)</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td class=\"model\">SecurityContextNotFound</td>\r\n\t\t\t<td>A referenced security context was not found (check the security context ID)</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td class=\"model\">SignatureSessionNotFound</td>\r\n\t\t\t<td>A referenced signature session was not found (check the signature session ID)</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td class=\"model\">BadSignatureSessionOperation</td>\r\n\t\t\t<td>The operation is invalid for the current signature session or document status. For instance, trying to await the session's completion if it is still <span class=\"model\">Pending</span> results in this error</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td class=\"model\">BackgroundProcessing</td>\r\n\t\t\t<td>The operation cannot be completed at this time because the resource is being processed in background</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td class=\"model\">SignatureSessionTokenRequired</td>\r\n\t\t\t<td>The signature session token was not passed on the <span class=\"model\">X-Signature-Session-Token</span> request header</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td class=\"model\">BadSignatureSessionToken</td>\r\n\t\t\t<td>An invalid signature session token was passed on the <span class=\"model\">X-Signature-Session-Token</span> request header. Check your application for possible corruption of the session token, which may contain characters <span class=\"code\">-</span> (hyphen) and <span class=\"code\">_</span> (underscore)</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td class=\"model\">ExpiredSignatureSessionToken</td>\r\n\t\t\t<td>An expired signature session token was passed on the <span class=\"model\">X-Signature-Session-Token</span> request header. Signature session tokens are normally valid for 4 hours.</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p style=\"font-size: 0.9em\">\r\n\t*The codes shown above are the most common error codes. Nonetheless, this list is not comprehensive. New codes may be added anytime without previous warning.\r\n</p>\r\n\r\n<h2>Culture / Internationalization (i18n)</h2>\r\n<p>The <span class=\"model\">Accept-Language</span> request header is observed by this API. The following cultures are supported:</p>\r\n<ul>\r\n\t<li><span class=\"code\">en-US</span> (or simply <span class=\"code\">en</span>)</li>\r\n\t<li><span class=\"code\">pt-BR</span> (or simply <span class=\"code\">pt</span>)</li>\r\n</ul>\r\n<p><i>Notice: error messages are not affected by this header and therefore should not be displayed to users, being better suited for logging.</i></p>\r\n",
    "version": "2.2.2"
  },
  "paths": {
    "/api/v2/authentication": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Prepares for a certificate authentication",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PrepareAuthenticationRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrepareAuthenticationRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PrepareAuthenticationRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PrepareAuthenticationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrepareAuthenticationResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrepareAuthenticationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Syntax error, for instance when a required field is not specified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Semantic error, for instance when a given entity ID is not found"
          }
        }
      }
    },
    "/api/v2/authentication/completion": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Completes a certificate authentication",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CompleteAuthenticationRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompleteAuthenticationRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CompleteAuthenticationRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CompleteAuthenticationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompleteAuthenticationResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompleteAuthenticationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Syntax error, for instance when a required field is not specified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Semantic error, for instance when a given entity ID is not found"
          }
        }
      }
    },
    "/Api/Authentications": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationsPostRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationsPostRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationsPostRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationsPostRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationsPostResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationsPostResponse"
                }
              }
            }
          },
          "400": {
            "description": "Syntax error, for instance when a required field is not specified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Semantic error, for instance when a given entity ID is not found"
          }
        }
      }
    },
    "/Api/Authentications/{token}/Finalize": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationPostResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationPostResponse"
                }
              }
            }
          },
          "400": {
            "description": "Syntax error, for instance when a required field is not specified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Semantic error, for instance when a given entity ID is not found"
          }
        }
      }
    },
    "/Api/Authentications/{token}/SignedBytes": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationsPostSignedBytesRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationsPostSignedBytesRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationsPostSignedBytesRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationsPostSignedBytesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationsPostSignedBytesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationsPostSignedBytesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Syntax error, for instance when a required field is not specified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Semantic error, for instance when a given entity ID is not found"
          }
        }
      }
    },
    "/Api/Authentication": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationGetResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationGetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Syntax error, for instance when a required field is not specified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Semantic error, for instance when a given entity ID is not found"
          }
        }
      },
      "post": {
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationPostRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationPostRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationPostRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationPostRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationPostResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationPostResponse"
                }
              }
            }
          },
          "400": {
            "description": "Syntax error, for instance when a required field is not specified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Semantic error, for instance when a given entity ID is not found"
          }
        }
      }
    },
    "/Api/CadesSignatures": {
      "post": {
        "tags": [
          "CadesSignature"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CadesSignaturePostRequestV1"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CadesSignaturePostRequestV1"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CadesSignaturePostRequestV1"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CadesSignaturePostRequestV1"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CadesSignaturePostResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CadesSignaturePostResponse"
                }
              }
            }
          },
          "400": {
            "description": "Syntax error, for instance when a required field is not specified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Semantic error, for instance when a given entity ID is not found"
          }
        }
      }
    },
    "/Api/v2/CadesSignatures": {
      "post": {
        "tags": [
          "CadesSignature"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CadesSignaturePostRequestV2"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CadesSignaturePostRequestV2"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CadesSignaturePostRequestV2"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CadesSignaturePostRequestV2"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CadesSignaturePostResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CadesSignaturePostResponse"
                }
              }
            }
          },
          "400": {
            "description": "Syntax error, for instance when a required field is not specified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Semantic error, for instance when a given entity ID is not found"
          }
        }
      }
    },
    "/Api/v3/CadesSignatures": {
      "post": {
        "tags": [
          "CadesSignature"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CadesSignaturePostRequestV3"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CadesSignaturePostRequestV3"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CadesSignaturePostRequestV3"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CadesSignaturePostRequestV3"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CadesSignaturePostResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CadesSignaturePostResponse"
                }
              }
            }
          },
          "400": {
            "description": "Syntax error, for instance when a required field is not specified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Semantic error, for instance when a given entity ID is not found"
          }
        }
      }
    },
    "/Api/CadesSignatures/{token}/SignedBytes": {
      "post": {
        "tags": [
          "CadesSignature"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CadesSignaturePostSignedBytesRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CadesSignaturePostSignedBytesRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CadesSignaturePostSignedBytesRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CadesSignaturePostSignedBytesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CadesSignaturePostSignedBytesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CadesSignaturePostSignedBytesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Syntax error, for instance when a required field is not specified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Semantic error, for instance when a given entity ID is not found"
          }
        }
      }
    },
    "/Api/CadesSignatures/{token}/Finalize": {
      "post": {
        "tags": [
          "CadesSignature"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CadesSignaturePostSignedBytesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CadesSignaturePostSignedBytesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Syntax error, for instance when a required field is not specified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Semantic error, for instance when a given entity ID is not found"
          }
        }
      }
    },
    "/Api/v2/CadesSignatures/{token}/SignedBytes": {
      "post": {
        "tags": [
          "CadesSignature"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CompleteSignatureRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompleteSignatureRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CompleteSignatureRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CompleteSignatureRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignatureResultModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignatureResultModel"
                }
              }
            }
          },
          "400": {
            "description": "Syntax error, for instance when a required field is not specified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Semantic error, for instance when a given entity ID is not found"
          }
        }
      }
    },
    "/Api/CadesSignatures/RequiredHashes": {
      "post": {
        "tags": [
          "CadesSignature"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/FileModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FileModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FileModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DigestAlgorithms"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DigestAlgorithms"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Syntax error, for instance when a required field is not specified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Semantic error, for instance when a given entity ID is not found"
          }
        }
      }
    },
    "/Api/CadesSignatures/Open": {
      "post": {
        "tags": [
          "CadesSignature"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/OpenCadesSignatureRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OpenCadesSignatureRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/OpenCadesSignatureRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/OpenCadesSignatureRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CadesSignatureModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CadesSignatureModel"
                }
              }
            }
          },
          "400": {
            "description": "Syntax error, for instance when a required field is not specified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Semantic error, for instance when a given entity ID is not found"
          }
        }
      }
    },
    "/api/document-keys": {
      "post": {
        "tags": [
          "DocumentKeys"
        ],
        "summary": "Allocates a document key to be used later on a document signature",
        "description": "To allocate a number of document keys at once, use the `POST /api/document-keys/batch` API instead. Limitations on the total number of unused document keys allocated may apply.",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AllocateDocumentKeyRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AllocateDocumentKeyRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AllocateDocumentKeyRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AllocateDocumentKeyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentKeyModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentKeyModel"
                }
              }
            }
          },
          "400": {
            "description": "Syntax error, for instance when a required field is not specified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Semantic error, for instance when a given entity ID is not found"
          }
        }
      }
    },
    "/api/document-keys/batch": {
      "post": {
        "tags": [
          "DocumentKeys"
        ],
        "summary": "Allocates a batch of document keys to be used later on document signatures",
        "description": "At most 100 keys may be allocated on each request. Limitations on the total number of unused document keys allocated may apply.",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AllocateDocumentKeyBatchRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AllocateDocumentKeyBatchRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AllocateDocumentKeyBatchRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AllocateDocumentKeyBatchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentKeyModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentKeyModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Syntax error, for instance when a required field is not specified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Semantic error, for instance when a given entity ID is not found"
          }
        }
      }
    },
    "/api/document-keys/{key}": {
      "get": {
        "tags": [
          "DocumentKeys"
        ],
        "summary": "Queries documents by key",
        "description": "The key may be given either in formatted form (e.g. *XXXX-XXXX-XXXX-XXXX*) or unformatted (e.g. *XXXXXXXXXXXXXXXX*)\r\n\r\nIf a document with the given key is not found, the response is a `200 (Success)` with `\"found\": false`.\r\n\r\nIf the given key has been allocated in advance but is not yet associated with a document, the response is a `200 (Success)`\r\nwith `\"found\": true` and `\"hasDocument\": false`. In this case, the field `provisionalMetadata` contains any provisional metadata\r\npassed during the document key allocation, which serves as an indicative of the metadata that a future document will likely have.\r\n\r\nOnly if `\"found\": true` **and** `\"hasDocument\": true` is the field `document` filled. In this case, `provisionalMetadata` is not filled.",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentKeyQueryResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentKeyQueryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Syntax error, for instance when a required field is not specified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Semantic error, for instance when a given entity ID is not found"
          }
        }
      }
    },
    "/api/document-keys/unused": {
      "get": {
        "tags": [
          "DocumentKeys"
        ],
        "summary": "Queries unused document keys",
        "parameters": [
          {
            "name": "metadataName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "metadataValue",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentKeySummary"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentKeySummary"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Syntax error, for instance when a required field is not specified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Semantic error, for instance when a given entity ID is not found"
          }
        }
      }
    },
    "/api/documents/{id}": {
      "get": {
        "tags": [
          "Documents"
        ],
        "summary": "Retrieves a document's details",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentModel"
                }
              }
            }
          },
          "400": {
            "description": "Syntax error, for instance when a required field is not specified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Semantic error, for instance when a given entity ID is not found"
          }
        }
      }
    },
    "/api/documents/{id}/signers": {
      "get": {
        "tags": [
          "Documents"
        ],
        "summary": "Retrieves the full information about each of a document's signers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SignerModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SignerModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Syntax error, for instance when a required field is not specified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Semantic error, for instance when a given entity ID is not found"
          }
        }
      }
    },
    "/api/documents/keys/{key}": {
      "get": {
        "tags": [
          "Documents"
        ],
        "summary": "Finds a document's details by its key",
        "description": "The key may be given either in formatted form (e.g. *XXXX-XXXX-XXXX-XXXX*) or unformatted (e.g. *XXXXXXXXXXXXXXXX*)\r\n\r\nIf a document with the given key is not found, the response is a `200 (Success)` with `\"found\": false`.",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentQueryResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentQueryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Syntax error, for instance when a required field is not specified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Semantic error, for instance when a given entity ID is not found"
          }
        }
      }
    },
    "/Api/PadesSignatures": {
      "post": {
        "tags": [
          "PadesSignature"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PadesSignaturePostRequestV1"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PadesSignaturePostRequestV1"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PadesSignaturePostRequestV1"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PadesSignaturePostRequestV1"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PadesSignaturePostResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PadesSignaturePostResponse"
                }
              }
            }
          },
          "400": {
            "description": "Syntax error, for instance when a required field is not specified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Semantic error, for instance when a given entity ID is not found"
          }
        }
      }
    },
    "/Api/v2/PadesSignatures": {
      "post": {
        "tags": [
          "PadesSignature"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PadesSignaturePostRequestV2"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PadesSignaturePostRequestV2"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PadesSignaturePostRequestV2"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PadesSignaturePostRequestV2"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PadesSignaturePostResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PadesSignaturePostResponse"
                }
              }
            }
          },
          "400": {
            "description": "Syntax error, for instance when a required field is not specified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Semantic error, for instance when a given entity ID is not found"
          }
        }
      }
    },
    "/Api/PadesSignatures/{token}/SignedBytes": {
      "post": {
        "tags": [
          "PadesSignature"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PadesSignaturePostSignedBytesRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PadesSignaturePostSignedBytesRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PadesSignaturePostSignedBytesRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PadesSignaturePostSignedBytesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PadesSignaturePostSignedBytesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PadesSignaturePostSignedBytesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Syntax error, for instance when a required field is not specified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Semantic error, for instance when a given entity ID is not found"
          }
        }
      }
    },
    "/Api/PadesSignatures/{token}/Finalize": {
      "post": {
        "tags": [
          "PadesSignature"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PadesSignaturePostSignedBytesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PadesSignaturePostSignedBytesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Syntax error, for instance when a required field is not specified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Semantic error, for instance when a given entity ID is not found"
          }
        }
      }
    },
    "/Api/v2/PadesSignatures/{token}/SignedBytes": {
      "post": {
        "tags": [
          "PadesSignature"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CompleteSignatureRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompleteSignatureRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CompleteSignatureRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CompleteSignatureRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignatureResultModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignatureResultModel"
                }
              }
            }
          },
          "400": {
            "description": "Syntax error, for instance when a required field is not specified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Semantic error, for instance when a given entity ID is not found"
          }
        }
      }
    },
    "/Api/PadesSignatures/Open": {
      "post": {
        "tags": [
          "PadesSignature"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/OpenSignatureRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OpenSignatureRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/OpenSignatureRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/OpenSignatureRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PadesSignatureModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PadesSignatureModel"
                }
              }
            }
          },
          "400": {
            "description": "Syntax error, for instance when a required field is not specified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Semantic error, for instance when a given entity ID is not found"
          }
        }
      }
    },
    "/Api/PadesVisualPositioningPresets/Footnote": {
      "get": {
        "tags": [
          "PadesVisualPositioningPresets"
        ],
        "parameters": [
          {
            "name": "pageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1
            }
          },
          {
            "name": "rows",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PadesVisualPositioningModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PadesVisualPositioningModel"
                }
              }
            }
          },
          "400": {
            "description": "Syntax error, for instance when a required field is not specified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Semantic error, for instance when a given entity ID is not found"
          }
        }
      }
    },
    "/Api/PadesVisualPositioningPresets/FootnoteBottomUp": {
      "get": {
        "tags": [
          "PadesVisualPositioningPresets"
        ],
        "parameters": [
          {
            "name": "pageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PadesVisualPositioningModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PadesVisualPositioningModel"
                }
              }
            }
          },
          "400": {
            "description": "Syntax error, for instance when a required field is not specified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Semantic error, for instance when a given entity ID is not found"
          }
        }
      }
    },
    "/Api/PadesVisualPositioningPresets/NewPage": {
      "get": {
        "tags": [
          "PadesVisualPositioningPresets"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PadesVisualPositioningModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PadesVisualPositioningModel"
                }
              }
            }
          },
          "400": {
            "description": "Syntax error, for instance when a required field is not specified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Semantic error, for instance when a given entity ID is not found"
          }
        }
      }
    },
    "/Api/Pdf/AddMarks": {
      "post": {
        "tags": [
          "Pdf"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PdfAddMarksRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PdfAddMarksRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PdfAddMarksRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PdfAddMarksRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PdfAddMarksResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PdfAddMarksResponse"
                }
              }
            }
          },
          "400": {
            "description": "Syntax error, for instance when a required field is not specified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Semantic error, for instance when a given entity ID is not found"
          }
        }
      }
    },
    "/api/pdf/stamp": {
      "post": {
        "tags": [
          "Pdf"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/StampPdfRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StampPdfRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/StampPdfRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/StampPdfRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StampPdfResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StampPdfResponse"
                }
              }
            }
          },
          "400": {
            "description": "Syntax error, for instance when a required field is not specified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Semantic error, for instance when a given entity ID is not found"
          }
        }
      }
    },
    "/api/signature": {
      "post": {
        "tags": [
          "Signature"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PrepareSignatureRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrepareSignatureRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PrepareSignatureRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PrepareSignatureRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrepareSignatureResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrepareSignatureResponse"
                }
              }
            }
          },
          "400": {
            "description": "Syntax error, for instance when a required field is not specified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Semantic error, for instance when a given entity ID is not found"
          }
        }
      }
    },
    "/api/signature/completion": {
      "post": {
        "tags": [
          "Signature"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CompleteSignatureRequestV2"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompleteSignatureRequestV2"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CompleteSignatureRequestV2"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CompleteSignatureRequestV2"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentModel"
                }
              }
            }
          },
          "400": {
            "description": "Syntax error, for instance when a required field is not specified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Semantic error, for instance when a given entity ID is not found"
          }
        }
      }
    },
    "/api/signature-inspection": {
      "put": {
        "tags": [
          "SignatureInspection"
        ],
        "summary": "Inspects a signed file, returning information about its signers and metadata about the corresponding document (if signed on this instance)",
        "description": "## Overview\r\n\r\nThe simplest usage of this API is by simply passing the `file` to be inspected. If passing a file by its contents, make sure to pass its\r\n`mimeType` so that the API can infer the signature type (PDF/PAdES, CMS/CAdES or XML/XmlDSig) from it.\r\n\r\nInformation about each signer found is returned on the `signers` property. If the file was signed on this instance, additional information\r\nabout the document is returned on the `document` property.\r\n\r\nPlease note that by default the signatures are not validated. This means that the `validationResults` property of each signer will be `null`\r\n(unless the file was signed on this instance, in which case the property will be filled).\r\n\r\n## Signature validation\r\n\r\nBy default, the signed file is only inspected, but not validated. To validate the signatures, pass `validate = true`. In this case, you may\r\noptionally specify the `securityContextId` to be used to validate the certificates. If omitted, your default security context will be used.\r\n\r\nPlease note that validating the signatures may take several seconds or even longer, depending on the number of signers. If more than 10\r\nsigners are found, only the first 10 are validated (this limit may be increased on on-demand instances). If your documents can have a large\r\nnumber of signers per document, please consider using the signer inspection API to validate each user separately on-demand as the user\r\ninteracts with the UI.\r\n\r\n## Validating detached CMS/CAdES signatures \r\n\r\nWhen validating detached CMS/CAdES signatures, the detached data file must be specified on the `dataFile` property or its digests must be given\r\non the `dataHashes` property. If passing `dataHashes`, make sure to pass at least the SHA-256 digest of the data file (other digests may be necessary\r\ndepending on the signature algorithm used by the signers). If your data files can be considerably large, passing the `dataHashes` is recommended\r\nsince it avoids transmitting the actual data files through the API.\r\n\r\nIf a CMS/CAdES signature is given with `validate = true` and without the corresponding data file specified, the API returns a 200 (OK) response with\r\n`success = false` and `failure = DataFileRequired`. This allows you to implement a validation form that lets the user submit the signature file and only\r\nrequests the data file if necessary.",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/InspectSignatureRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InspectSignatureRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/InspectSignatureRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/InspectSignatureRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InspectSignatureResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InspectSignatureResponse"
                }
              }
            }
          },
          "400": {
            "description": "Syntax error, for instance when a required field is not specified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Semantic error, for instance when a given entity ID is not found"
          }
        }
      }
    },
    "/api/signature-sessions/{id}": {
      "get": {
        "tags": [
          "SignatureSessions"
        ],
        "summary": "Retrieves a signature session's details",
        "description": "## Overview\r\n\r\nWhen a user is redirected back to your application at the end of a signature session, a query parameter is appended to the `returnUrl` containing the ID of the\r\nsignature session, i.e. `?signatureSessionId=...`. Your app must get this parameter and use it to call this API, which will return information about the session,\r\nmainly its status and documents.\r\n\r\n## Statuses\r\n\r\nWhen a user is redirected back to your app, the session will have one of two possible statuses: `Completed` or `UserCancelled`. You should always check the status,\r\nsince it is perfecly normal for a user to land back on your app by cancelling the session instead of going through the procedure.\r\n\r\n## Statuses (when background processing is enabled)\r\n\r\nIf you enabled background processing of the session by passing `EnableBackgroundProcessing = true` when creating the session, then two additional statuses are possible:\r\n`Processing` and `ProcessingError`.\r\n\r\nWhile a session is still `Processing`, some documents will be in status `Processing` and cannot be downloaded. Only when the session transitions to the `Complete` status\r\nare all documents ready to be downloaded.\r\n\r\nThe status `ProcessingError` is a rare condition that occurrs only in corner cases such as the user's certificate being revoked during the time between the\r\nstart of the session and the completion of the background processing. It is perfectly appropriate for your app to `throw` if this status is returned.\r\n\r\n## Downloading signed files\r\n\r\nThe signed files are not returned on the body of the response. Instead, a `location` is given for each file which must be invoked to get the actual files' contents\r\n(see [DocumentFileModel](#model-DocumentFileModel)).",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignatureSessionModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignatureSessionModel"
                }
              }
            }
          },
          "400": {
            "description": "Syntax error, for instance when a required field is not specified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Semantic error, for instance when a given entity ID is not found"
          }
        }
      }
    },
    "/api/signature-sessions": {
      "post": {
        "tags": [
          "SignatureSessions"
        ],
        "summary": "Creates a signature session",
        "description": "## Overview\r\n\r\nThis API creates a **signature session**, which enables your users to perform digital signatures without requiring you to implement a signature web page on your app.\r\n\r\nTo create a signature session, your app specifies a `returnUrl` and receives back a `redirectUrl`. Your app then redirects the user to the `redirectUrl`, where he will \r\ndigitally sign documents. Once the process is complete, the user will be redirected back to your app on the *returnUrl* you specified when starting the session.\r\nA query parameter will be added to the `returnUrl` containing the signature session ID (`?signatureSessionId=...`). Then, your app parses the signature session ID on\r\nthe query string and uses it to call APIs to fetch the documents signed by the user.\r\n\r\nThe session can either have predefined documents that the user must sign (passed on the `Documents` collection) or allow the user to upload his own documents (in this\r\ncase, omit the `Documents` collection).\r\n\r\n## Showing the signature page on a new tab\r\n\r\nThe default behavior is for your app to provide a `returnUrl`, and then redirect the user to the `returnUrl` returned by this API with a HTTP redirection response\r\n(e.g. *303 See Other*) or with a `location.href = ...` call on Javascript. By the end of the procedure, the user is redirected back to your app, all in a single browser tab.\r\n\r\nAlternatively, you may want to display the signature page on a new tab. In this case, omit the `returnUrl` parameter when creating the session. Furthermore, you must open\r\nthe tab with an HTML anchor tag with `target=\"_blank\"`, or with the `window.open()` function on Javascript. The tab will then be closed by the end of the process.\r\n\r\n## Background processing\r\n\r\nBy default, users are kept waiting while documents are processed before being redirected back to your application.\r\n\r\nIf you want to provide your users with a faster experience, turn on background processing by passing `EnableBackgroundProcessing = true`. In this case, users do not wait\r\nfor documents to be processed. However, your application must be ready to handle the case of a signature session whose documents are not yet available for download.\r\n\r\n## Webhooks\r\n\r\nYou may configure your Rest PKI Core subscription to inform your app of any documents that are signed on signature sessions created by it. This way, you don't\r\nneed to rely on users landing back on your page to detect that documents have been signed. Please refer to the *Webhooks* section for more information.\r\n\r\n## Disabling downloads\r\n\r\nIf you don't receive webhook notifications of documents signed, you might feel like the signature session process is not working reliably because some users simply download\r\nthe signed documents and don't bother to stick around while they are redirected back to your app, denying it the chance to detect that documents have been signed.\r\nIf you feel this is a problem for your case, you can disable the downloading of signed documents by passing `DisableDownloads = true`. Then, users will only be able to\r\ndownload documents through your app, and thus will be far less inclined to quit the process prematurely.\r\n\r\n## File name validation\r\n\r\nIf you want to validate the file names that are acceptable for users to upload, you can configure the *acceptable file name pattern* on your subscription's\r\nconfiguration to a regular expression conforming to your rules.\r\n\r\nYou can also configure a *file name validation endpoint*, an API implemented by your app that is called for each file selected by the user with the file's name and\r\nMIME type and returns whether the file should be acceptable or not (and, if not, a reason to be displayed to the user).",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSignatureSessionRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSignatureSessionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSignatureSessionRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSignatureSessionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSignatureSessionResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSignatureSessionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Syntax error, for instance when a required field is not specified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Semantic error, for instance when a given entity ID is not found"
          }
        }
      }
    },
    "/api/signature-sessions/{id}/when-completed": {
      "get": {
        "tags": [
          "SignatureSessions"
        ],
        "summary": "Waits for the completion of a signature session",
        "description": "This API can be used when background processing is enabled on a signature session to wait for its processing.\r\n\r\nThe API will hang for a short period (normally 15 seconds) waiting for the session to be completed. If it is completed during that time,\r\nthe API returns immediately with `Completed = true`. If, however, that period elapsed and the session is still not completed, the API\r\nreturns with `Completed = false` and with the current `Progress` (0 to 100).\r\n\r\nA client app that intends to wait for the session completion indefinitely must therefore implement a loop to call this API until\r\n`Completed = true` is returned. This might seem like polling (and actually is), but is different because it is a sort of \"smart polling\"\r\nsince the API returns immediately once the session is completed, instead of the app having to wait for the next polling interval.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionCompletionStatus"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionCompletionStatus"
                }
              }
            }
          },
          "400": {
            "description": "Syntax error, for instance when a required field is not specified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Semantic error, for instance when a given entity ID is not found"
          }
        }
      }
    },
    "/Api/TimestampPlans/{identifier}/Issue": {
      "post": {
        "tags": [
          "Timestamp"
        ],
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DigestAlgorithmAndValueModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DigestAlgorithmAndValueModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DigestAlgorithmAndValueModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DigestAlgorithmAndValueModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimestampIssueResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimestampIssueResponse"
                }
              }
            }
          },
          "400": {
            "description": "Syntax error, for instance when a required field is not specified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Semantic error, for instance when a given entity ID is not found"
          }
        }
      }
    },
    "/api/tsp/{identifier}": {
      "post": {
        "tags": [
          "Timestamp"
        ],
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DigestAlgorithmAndValueModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DigestAlgorithmAndValueModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DigestAlgorithmAndValueModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DigestAlgorithmAndValueModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimestampIssueResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimestampIssueResponse"
                }
              }
            }
          },
          "400": {
            "description": "Syntax error, for instance when a required field is not specified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Semantic error, for instance when a given entity ID is not found"
          }
        }
      }
    },
    "/api/plain-uploads": {
      "post": {
        "tags": [
          "Upload"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileReferenceModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileReferenceModel"
                }
              }
            }
          },
          "400": {
            "description": "Syntax error, for instance when a required field is not specified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Semantic error, for instance when a given entity ID is not found"
          }
        }
      }
    },
    "/Api/MultipartUploads": {
      "post": {
        "tags": [
          "Upload"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MultipartUploadBeginResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MultipartUploadBeginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Syntax error, for instance when a required field is not specified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Semantic error, for instance when a given entity ID is not found"
          }
        }
      }
    },
    "/Api/MultipartUploads/{token}/{partNumber}": {
      "post": {
        "tags": [
          "Upload"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Syntax error, for instance when a required field is not specified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Semantic error, for instance when a given entity ID is not found"
          }
        }
      }
    },
    "/Api/MultipartUploads/{token}": {
      "post": {
        "tags": [
          "Upload"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MultipartUploadEndRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MultipartUploadEndRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MultipartUploadEndRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MultipartUploadEndRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Syntax error, for instance when a required field is not specified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Semantic error, for instance when a given entity ID is not found"
          }
        }
      }
    },
    "/Api/XmlSignatures/FullXmlSignature": {
      "post": {
        "tags": [
          "XmlSignature"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/FullXmlSignaturePostRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FullXmlSignaturePostRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FullXmlSignaturePostRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FullXmlSignaturePostRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XmlSignaturePostResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/XmlSignaturePostResponse"
                }
              }
            }
          },
          "400": {
            "description": "Syntax error, for instance when a required field is not specified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Semantic error, for instance when a given entity ID is not found"
          }
        }
      }
    },
    "/Api/XmlSignatures/XmlElementSignature": {
      "post": {
        "tags": [
          "XmlSignature"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/XmlElementSignaturePostRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/XmlElementSignaturePostRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/XmlElementSignaturePostRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/XmlElementSignaturePostRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XmlSignaturePostResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/XmlSignaturePostResponse"
                }
              }
            }
          },
          "400": {
            "description": "Syntax error, for instance when a required field is not specified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Semantic error, for instance when a given entity ID is not found"
          }
        }
      }
    },
    "/Api/XmlSignatures/{token}/SignedBytes": {
      "post": {
        "tags": [
          "XmlSignature"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/XmlSignaturePostSignedBytesRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/XmlSignaturePostSignedBytesRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/XmlSignaturePostSignedBytesRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/XmlSignaturePostSignedBytesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XmlSignaturePostSignedBytesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/XmlSignaturePostSignedBytesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Syntax error, for instance when a required field is not specified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Semantic error, for instance when a given entity ID is not found"
          }
        }
      }
    },
    "/Api/XmlSignatures/{token}/Finalize": {
      "post": {
        "tags": [
          "XmlSignature"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XmlSignaturePostSignedBytesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/XmlSignaturePostSignedBytesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Syntax error, for instance when a required field is not specified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Semantic error, for instance when a given entity ID is not found"
          }
        }
      }
    },
    "/Api/XmlSignatures/Open": {
      "post": {
        "tags": [
          "XmlSignature"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/OpenXmlSignatureRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OpenXmlSignatureRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/OpenXmlSignatureRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/OpenXmlSignatureRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/XmlSignatureModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/XmlSignatureModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Syntax error, for instance when a required field is not specified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Semantic error, for instance when a given entity ID is not found"
          }
        }
      }
    },
    "/Api/v2/XmlSignatures/Open": {
      "post": {
        "tags": [
          "XmlSignature"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/OpenXmlSignatureRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OpenXmlSignatureRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/OpenXmlSignatureRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/OpenXmlSignatureRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XmlSignatureResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/XmlSignatureResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Syntax error, for instance when a required field is not specified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Semantic error, for instance when a given entity ID is not found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AllocateDocumentKeyBatchRequest": {
        "type": "object",
        "properties": {
          "count": {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "provisionalMetadata": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AllocateDocumentKeyRequest": {
        "type": "object",
        "properties": {
          "provisionalMetadata": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AttributeCertificateModel": {
        "type": "object",
        "properties": {
          "holderType": {
            "$ref": "#/components/schemas/HolderTypes"
          },
          "holderCertificateSerialNumber": {
            "type": "string",
            "nullable": true
          },
          "holderDisplayName": {
            "type": "string",
            "nullable": true
          },
          "holderName": {
            "$ref": "#/components/schemas/GeneralNameModel"
          },
          "issuerDisplayName": {
            "type": "string",
            "nullable": true
          },
          "issuer": {
            "$ref": "#/components/schemas/NameModel"
          },
          "validityStart": {
            "type": "string",
            "format": "date-time"
          },
          "validityEnd": {
            "type": "string",
            "format": "date-time"
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CertifiedAttributeModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuditPackageOptions": {
        "type": "object",
        "properties": {
          "generate": {
            "type": "boolean"
          },
          "includeFile": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "AuthenticationFailures": {
        "enum": [
          "CertificateFailedValidation",
          "StaleSession"
        ],
        "type": "string"
      },
      "AuthenticationGetResponse": {
        "type": "object",
        "properties": {
          "nonce": {
            "type": "string",
            "format": "byte",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuthenticationPostRequest": {
        "type": "object",
        "properties": {
          "certificate": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "nonce": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "signature": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "securityContextId": {
            "type": "string",
            "format": "uuid"
          },
          "ignoreRevocationStatusUnknown": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuthenticationPostResponse": {
        "type": "object",
        "properties": {
          "certificate": {
            "$ref": "#/components/schemas/CertificateModel"
          },
          "validationResults": {
            "$ref": "#/components/schemas/ValidationResultsModel"
          }
        },
        "additionalProperties": false
      },
      "AuthenticationsPostRequest": {
        "type": "object",
        "properties": {
          "securityContextId": {
            "type": "string",
            "format": "uuid"
          },
          "ignoreRevocationStatusUnknown": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuthenticationsPostResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "nullable": true
          },
          "toSignData": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "toSignHash": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "digestAlgorithmOid": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuthenticationsPostSignedBytesRequest": {
        "type": "object",
        "properties": {
          "signature": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "certificate": {
            "type": "string",
            "format": "byte",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuthenticationsPostSignedBytesResponse": {
        "type": "object",
        "properties": {
          "validationResults": {
            "$ref": "#/components/schemas/ValidationResultsModel"
          },
          "certificate": {
            "$ref": "#/components/schemas/CertificateModel"
          }
        },
        "additionalProperties": false
      },
      "AutoPositioningHorizontalDirections": {
        "enum": [
          "LeftToRight",
          "RightToLeft"
        ],
        "type": "string"
      },
      "AutoPositioningVerticalDirections": {
        "enum": [
          "TopDown",
          "BottomUp"
        ],
        "type": "string"
      },
      "Blockchains": {
        "enum": [
          "Bitcoin",
          "Fabric"
        ],
        "type": "string"
      },
      "CadesSignatureModel": {
        "type": "object",
        "properties": {
          "encapsulatedContentType": {
            "$ref": "#/components/schemas/CmsContentTypes"
          },
          "hasEncapsulatedContent": {
            "type": "boolean"
          },
          "signers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CadesSignerModel"
            },
            "nullable": true
          },
          "encapsulatedContent": {
            "$ref": "#/components/schemas/FileModel"
          },
          "auditPackage": {
            "$ref": "#/components/schemas/FileModel"
          },
          "bStamp": {
            "$ref": "#/components/schemas/SignatureBStampModel"
          }
        },
        "additionalProperties": false
      },
      "CadesSignaturePostRequestV1": {
        "type": "object",
        "properties": {
          "contentToSign": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "cmsToCoSign": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "encapsulateContent": {
            "type": "boolean",
            "nullable": true
          },
          "certificate": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "signaturePolicyId": {
            "type": "string",
            "format": "uuid"
          },
          "securityContextId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "callbackArgument": {
            "type": "string",
            "nullable": true
          },
          "ignoreRevocationStatusUnknown": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CadesSignaturePostRequestV2": {
        "type": "object",
        "properties": {
          "dataHashes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DigestAlgorithmAndValueModel"
            },
            "nullable": true
          },
          "contentToSign": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "cmsToCoSign": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "encapsulateContent": {
            "type": "boolean",
            "nullable": true
          },
          "certificate": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "signaturePolicyId": {
            "type": "string",
            "format": "uuid"
          },
          "securityContextId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "callbackArgument": {
            "type": "string",
            "nullable": true
          },
          "ignoreRevocationStatusUnknown": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CadesSignaturePostRequestV3": {
        "type": "object",
        "properties": {
          "dataHashes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DigestAlgorithmAndValueModel"
            },
            "nullable": true
          },
          "fileToSign": {
            "$ref": "#/components/schemas/FileModel"
          },
          "cmsToCoSign": {
            "$ref": "#/components/schemas/FileModel"
          },
          "encapsulateContent": {
            "type": "boolean",
            "nullable": true
          },
          "certificate": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "signaturePolicyId": {
            "type": "string",
            "format": "uuid"
          },
          "securityContextId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "callbackArgument": {
            "type": "string",
            "nullable": true
          },
          "ignoreRevocationStatusUnknown": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CadesSignaturePostResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "nullable": true
          },
          "certificate": {
            "$ref": "#/components/schemas/CertificateModel"
          },
          "toSignData": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "toSignHash": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "digestAlgorithmOid": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CadesSignaturePostSignedBytesRequest": {
        "type": "object",
        "properties": {
          "signature": {
            "type": "string",
            "format": "byte",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CadesSignaturePostSignedBytesResponse": {
        "type": "object",
        "properties": {
          "cms": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "callbackArgument": {
            "type": "string",
            "nullable": true
          },
          "certificate": {
            "$ref": "#/components/schemas/CertificateModel"
          }
        },
        "additionalProperties": false
      },
      "CadesSignerModel": {
        "type": "object",
        "properties": {
          "messageDigest": {
            "$ref": "#/components/schemas/DigestAlgorithmAndValueModel"
          },
          "signature": {
            "$ref": "#/components/schemas/SignatureAlgorithmAndValueModel"
          },
          "signaturePolicy": {
            "$ref": "#/components/schemas/SignaturePolicyIdentifierModel"
          },
          "certificate": {
            "$ref": "#/components/schemas/CertificateModel"
          },
          "signingTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "certifiedDateReference": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "timestamps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CadesTimestampModel"
            },
            "nullable": true
          },
          "validationResults": {
            "$ref": "#/components/schemas/ValidationResultsModel"
          },
          "commitmentType": {
            "$ref": "#/components/schemas/CommitmentTypeModel"
          },
          "bStamp": {
            "$ref": "#/components/schemas/SignerBStampModel"
          }
        },
        "additionalProperties": false
      },
      "CadesTimestampModel": {
        "type": "object",
        "properties": {
          "genTime": {
            "type": "string",
            "format": "date-time"
          },
          "serialNumber": {
            "type": "string",
            "nullable": true
          },
          "messageImprint": {
            "$ref": "#/components/schemas/DigestAlgorithmAndValueModel"
          },
          "encapsulatedContentType": {
            "$ref": "#/components/schemas/CmsContentTypes"
          },
          "hasEncapsulatedContent": {
            "type": "boolean"
          },
          "signers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CadesSignerModel"
            },
            "nullable": true
          },
          "encapsulatedContent": {
            "$ref": "#/components/schemas/FileModel"
          },
          "auditPackage": {
            "$ref": "#/components/schemas/FileModel"
          },
          "bStamp": {
            "$ref": "#/components/schemas/SignatureBStampModel"
          }
        },
        "additionalProperties": false
      },
      "CertificateModel": {
        "type": "object",
        "properties": {
          "subjectName": {
            "$ref": "#/components/schemas/NameModel"
          },
          "issuerName": {
            "$ref": "#/components/schemas/NameModel"
          },
          "issuerDisplayName": {
            "type": "string",
            "nullable": true
          },
          "serialNumber": {
            "type": "string",
            "nullable": true
          },
          "validityStart": {
            "type": "string",
            "format": "date-time"
          },
          "validityEnd": {
            "type": "string",
            "format": "date-time"
          },
          "issuer": {
            "$ref": "#/components/schemas/CertificateModel"
          },
          "pkiBrazil": {
            "$ref": "#/components/schemas/PkiBrazilCertificateModel"
          },
          "pkiItaly": {
            "$ref": "#/components/schemas/PkiItalyCertificateModel"
          },
          "binaryThumbprintSHA256": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "thumbprint": {
            "type": "string",
            "nullable": true
          },
          "thumbprintSHA256": {
            "type": "string",
            "nullable": true
          },
          "subjectCommonName": {
            "type": "string",
            "nullable": true
          },
          "subjectDisplayName": {
            "type": "string",
            "nullable": true
          },
          "subjectIdentifier": {
            "type": "string",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "nullable": true
          },
          "organization": {
            "type": "string",
            "nullable": true
          },
          "organizationIdentifier": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CertificateReferenceModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "content": {
            "type": "string",
            "format": "byte",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CertificateRequirement": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/CertificateRequirementTypes"
          },
          "argument": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CertificateRequirementTypes": {
        "enum": [
          "CryptoDevice",
          "Cpf"
        ],
        "type": "string"
      },
      "CertificateSummary": {
        "type": "object",
        "properties": {
          "thumbprint": {
            "type": "string",
            "nullable": true
          },
          "thumbprintSHA256": {
            "type": "string",
            "nullable": true
          },
          "subjectCommonName": {
            "type": "string",
            "nullable": true
          },
          "subjectDisplayName": {
            "type": "string",
            "nullable": true
          },
          "subjectIdentifier": {
            "type": "string",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "nullable": true
          },
          "organization": {
            "type": "string",
            "nullable": true
          },
          "organizationIdentifier": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CertifiedAttributeModel": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/CertifiedAttributeTypes"
          },
          "role": {
            "$ref": "#/components/schemas/RoleAttributeModel"
          }
        },
        "additionalProperties": false
      },
      "CertifiedAttributeTypes": {
        "enum": [
          "Role"
        ],
        "type": "string"
      },
      "CmsContentTypes": {
        "enum": [
          "Data",
          "SignedData",
          "EnvelopedData",
          "DigestedData",
          "EncryptedData",
          "AuthenticatedData",
          "TstInfo"
        ],
        "type": "string"
      },
      "CmsSignatureOptions": {
        "type": "object",
        "properties": {
          "detached": {
            "type": "boolean"
          },
          "dataFile": {
            "$ref": "#/components/schemas/FileReferenceModel"
          },
          "dataHashes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DigestAlgorithmAndValueModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ColorModel": {
        "type": "object",
        "properties": {
          "red": {
            "type": "integer",
            "format": "int32"
          },
          "green": {
            "type": "integer",
            "format": "int32"
          },
          "blue": {
            "type": "integer",
            "format": "int32"
          },
          "alpha": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommitmentTypeModel": {
        "type": "object",
        "properties": {
          "oid": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CompleteAuthenticationRequest": {
        "required": [
          "certificate",
          "signature",
          "state"
        ],
        "type": "object",
        "properties": {
          "state": {
            "minLength": 1,
            "type": "string"
          },
          "certificate": {
            "type": "string",
            "format": "byte"
          },
          "signature": {
            "type": "string",
            "format": "byte"
          }
        },
        "additionalProperties": false
      },
      "CompleteAuthenticationResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "failure": {
            "$ref": "#/components/schemas/AuthenticationFailures"
          },
          "certificate": {
            "$ref": "#/components/schemas/CertificateModel"
          },
          "validationResults": {
            "$ref": "#/components/schemas/ValidationResultsModel"
          }
        },
        "additionalProperties": false
      },
      "CompleteSignatureRequest": {
        "type": "object",
        "properties": {
          "signature": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "forceBlobResult": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "CompleteSignatureRequestV2": {
        "required": [
          "signature",
          "state"
        ],
        "type": "object",
        "properties": {
          "state": {
            "minLength": 1,
            "type": "string"
          },
          "signature": {
            "type": "string",
            "format": "byte"
          }
        },
        "additionalProperties": false
      },
      "CreateSignatureSessionRequest": {
        "type": "object",
        "properties": {
          "returnUrl": {
            "maxLength": 1024,
            "type": "string",
            "nullable": true
          },
          "securityContextId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "callbackArgument": {
            "maxLength": 1024,
            "type": "string",
            "nullable": true
          },
          "enableBackgroundProcessing": {
            "type": "boolean"
          },
          "disableDownloads": {
            "type": "boolean"
          },
          "documentMetadata": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "nullable": true
          },
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SignatureSessionDocumentData"
            },
            "nullable": true
          },
          "certificateRequirements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CertificateRequirement"
            },
            "nullable": true
          },
          "pdfSignatureOptions": {
            "$ref": "#/components/schemas/PdfSignatureOptions"
          },
          "cmsSignatureOptions": {
            "$ref": "#/components/schemas/CmsSignatureOptions"
          }
        },
        "additionalProperties": false
      },
      "CreateSignatureSessionResponse": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "string",
            "format": "uuid"
          },
          "redirectUrl": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DigestAlgorithmAndValueModel": {
        "type": "object",
        "properties": {
          "algorithm": {
            "$ref": "#/components/schemas/DigestAlgorithms"
          },
          "value": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "hexValue": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DigestAlgorithms": {
        "enum": [
          "MD5",
          "SHA1",
          "SHA256",
          "SHA384",
          "SHA512",
          "SHA3_256"
        ],
        "type": "string"
      },
      "DocumentFileModel": {
        "type": "object",
        "properties": {
          "mimeType": {
            "type": "string",
            "nullable": true
          },
          "content": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "blobToken": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "length": {
            "type": "integer",
            "format": "int64"
          },
          "contentType": {
            "type": "string",
            "nullable": true,
            "deprecated": true
          },
          "location": {
            "type": "string",
            "nullable": true,
            "deprecated": true
          }
        },
        "additionalProperties": false
      },
      "DocumentKeyModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "nullable": true
          },
          "formattedKey": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DocumentKeyQueryResponse": {
        "type": "object",
        "properties": {
          "found": {
            "type": "boolean"
          },
          "formattedKey": {
            "type": "string",
            "nullable": true
          },
          "hasDocument": {
            "type": "boolean"
          },
          "provisionalMetadata": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "nullable": true
          },
          "document": {
            "$ref": "#/components/schemas/DocumentModel"
          }
        },
        "additionalProperties": false
      },
      "DocumentKeySummary": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "nullable": true
          },
          "formattedKey": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DocumentModel": {
        "type": "object",
        "properties": {
          "signers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SignerSummary"
            },
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "key": {
            "type": "string",
            "nullable": true
          },
          "formattedKey": {
            "type": "string",
            "nullable": true
          },
          "originalFile": {
            "$ref": "#/components/schemas/DocumentFileModel"
          },
          "markedFile": {
            "$ref": "#/components/schemas/DocumentFileModel"
          },
          "signedFile": {
            "$ref": "#/components/schemas/DocumentFileModel"
          },
          "signatureType": {
            "$ref": "#/components/schemas/SignatureTypes"
          },
          "availableUntil": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DocumentQueryResponse": {
        "type": "object",
        "properties": {
          "found": {
            "type": "boolean"
          },
          "document": {
            "$ref": "#/components/schemas/DocumentModel"
          }
        },
        "additionalProperties": false
      },
      "DocumentStatus": {
        "enum": [
          "PendingSignature",
          "Processing",
          "Completed",
          "ProcessingError"
        ],
        "type": "string"
      },
      "DocumentSummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "key": {
            "type": "string",
            "nullable": true
          },
          "formattedKey": {
            "type": "string",
            "nullable": true
          },
          "originalFile": {
            "$ref": "#/components/schemas/DocumentFileModel"
          },
          "markedFile": {
            "$ref": "#/components/schemas/DocumentFileModel"
          },
          "signedFile": {
            "$ref": "#/components/schemas/DocumentFileModel"
          },
          "signatureType": {
            "$ref": "#/components/schemas/SignatureTypes"
          },
          "availableUntil": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ErrorModelV2": {
        "type": "object",
        "properties": {
          "validationResults": {
            "$ref": "#/components/schemas/ValidationResultsModel"
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "code": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "details": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FileModel": {
        "type": "object",
        "properties": {
          "mimeType": {
            "type": "string",
            "nullable": true
          },
          "content": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "blobToken": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FileReferenceModel": {
        "type": "object",
        "properties": {
          "mimeType": {
            "type": "string",
            "nullable": true
          },
          "content": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "blobToken": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "length": {
            "type": "integer",
            "format": "int64"
          },
          "contentType": {
            "type": "string",
            "nullable": true,
            "deprecated": true
          },
          "location": {
            "type": "string",
            "nullable": true,
            "deprecated": true
          }
        },
        "additionalProperties": false
      },
      "FullXmlSignaturePostRequest": {
        "type": "object",
        "properties": {
          "xml": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "signatureElementId": {
            "type": "string",
            "nullable": true
          },
          "signatureElementLocation": {
            "$ref": "#/components/schemas/XmlElementLocationModel"
          },
          "certificate": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "signaturePolicyId": {
            "type": "string",
            "format": "uuid"
          },
          "securityContextId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "callbackArgument": {
            "type": "string",
            "nullable": true
          },
          "ignoreRevocationStatusUnknown": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GeneralNameChoices": {
        "enum": [
          "OtherName",
          "Rfc822Name",
          "DnsName",
          "X400Address",
          "DirectoryName",
          "EdiPartyName",
          "Uri",
          "IPAddress",
          "RegisteredId"
        ],
        "type": "string"
      },
      "GeneralNameModel": {
        "type": "object",
        "properties": {
          "choice": {
            "$ref": "#/components/schemas/GeneralNameChoices"
          },
          "directoryName": {
            "$ref": "#/components/schemas/NameModel"
          },
          "otherName": {
            "$ref": "#/components/schemas/OtherNameModel"
          },
          "uri": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "HolderTypes": {
        "enum": [
          "EntityName",
          "BaseCertificateID"
        ],
        "type": "string"
      },
      "InspectSignatureFailures": {
        "enum": [
          "DataFileRequired"
        ],
        "type": "string"
      },
      "InspectSignatureRequest": {
        "required": [
          "file"
        ],
        "type": "object",
        "properties": {
          "file": {
            "$ref": "#/components/schemas/FileReferenceModel"
          },
          "validate": {
            "type": "boolean"
          },
          "securityContextId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "ignoreRevocationStatusUnknown": {
            "type": "boolean"
          },
          "trustUncertifiedSigningTime": {
            "type": "boolean"
          },
          "dataFile": {
            "$ref": "#/components/schemas/FileReferenceModel"
          },
          "dataHashes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DigestAlgorithmAndValueModel"
            },
            "nullable": true
          },
          "extractEncapsulatedContent": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "InspectSignatureResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "failure": {
            "$ref": "#/components/schemas/InspectSignatureFailures"
          },
          "missingDataHash": {
            "$ref": "#/components/schemas/DigestAlgorithms"
          },
          "signers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SignerModel"
            },
            "nullable": true
          },
          "document": {
            "$ref": "#/components/schemas/DocumentSummary"
          },
          "hasEncapsulatedContent": {
            "type": "boolean",
            "nullable": true
          },
          "encapsulatedContentType": {
            "$ref": "#/components/schemas/CmsContentTypes"
          },
          "encapsulatedContent": {
            "$ref": "#/components/schemas/FileReferenceModel"
          }
        },
        "additionalProperties": false
      },
      "MultipartUploadBeginResponse": {
        "type": "object",
        "properties": {
          "blobToken": {
            "type": "string",
            "nullable": true
          },
          "partSize": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "MultipartUploadEndRequest": {
        "required": [
          "partETags"
        ],
        "type": "object",
        "properties": {
          "partETags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "completeMD5": {
            "type": "string",
            "format": "byte",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NameModel": {
        "type": "object",
        "properties": {
          "country": {
            "type": "string",
            "nullable": true
          },
          "organization": {
            "type": "string",
            "nullable": true
          },
          "organizationUnit": {
            "type": "string",
            "nullable": true
          },
          "dnQualifier": {
            "type": "string",
            "nullable": true
          },
          "stateName": {
            "type": "string",
            "nullable": true
          },
          "commonName": {
            "type": "string",
            "nullable": true
          },
          "serialNumber": {
            "type": "string",
            "nullable": true
          },
          "locality": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "surname": {
            "type": "string",
            "nullable": true
          },
          "givenName": {
            "type": "string",
            "nullable": true
          },
          "initials": {
            "type": "string",
            "nullable": true
          },
          "pseudonym": {
            "type": "string",
            "nullable": true
          },
          "generationQualifier": {
            "type": "string",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "nullable": true
          },
          "allValues": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "nullable": true
          },
          "dnString": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NamespaceModel": {
        "type": "object",
        "properties": {
          "prefix": {
            "type": "string",
            "nullable": true
          },
          "uri": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OpenCadesSignatureRequestModel": {
        "required": [
          "file"
        ],
        "type": "object",
        "properties": {
          "extractEncapsulatedContent": {
            "type": "boolean"
          },
          "file": {
            "$ref": "#/components/schemas/FileModel"
          },
          "validate": {
            "type": "boolean"
          },
          "auditPackage": {
            "$ref": "#/components/schemas/AuditPackageOptions"
          },
          "defaultSignaturePolicyId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "acceptableExplicitPolicies": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "securityContextId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "ignoreRevocationStatusUnknown": {
            "type": "boolean",
            "nullable": true
          },
          "trustUncertifiedSigningTime": {
            "type": "boolean"
          },
          "dataHashes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DigestAlgorithmAndValueModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OpenSignatureRequestModel": {
        "required": [
          "file"
        ],
        "type": "object",
        "properties": {
          "file": {
            "$ref": "#/components/schemas/FileModel"
          },
          "validate": {
            "type": "boolean"
          },
          "auditPackage": {
            "$ref": "#/components/schemas/AuditPackageOptions"
          },
          "defaultSignaturePolicyId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "acceptableExplicitPolicies": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "securityContextId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "ignoreRevocationStatusUnknown": {
            "type": "boolean",
            "nullable": true
          },
          "trustUncertifiedSigningTime": {
            "type": "boolean"
          },
          "dataHashes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DigestAlgorithmAndValueModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OpenXmlSignatureRequestModel": {
        "required": [
          "file"
        ],
        "type": "object",
        "properties": {
          "idResolutionTable": {
            "$ref": "#/components/schemas/XmlIdResolutionTableModel"
          },
          "file": {
            "$ref": "#/components/schemas/FileModel"
          },
          "validate": {
            "type": "boolean"
          },
          "auditPackage": {
            "$ref": "#/components/schemas/AuditPackageOptions"
          },
          "defaultSignaturePolicyId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "acceptableExplicitPolicies": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "securityContextId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "ignoreRevocationStatusUnknown": {
            "type": "boolean",
            "nullable": true
          },
          "trustUncertifiedSigningTime": {
            "type": "boolean"
          },
          "dataHashes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DigestAlgorithmAndValueModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OtherNameModel": {
        "type": "object",
        "properties": {
          "typeId": {
            "type": "string",
            "nullable": true
          },
          "encoded": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "displayHtml": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PadesCertificationLevel": {
        "enum": [
          "NotCertified",
          "CertifiedFormFilling",
          "CertifiedFormFillingAndAnnotations",
          "CertifiedNoChangesAllowed"
        ],
        "type": "string"
      },
      "PadesHorizontalAlign": {
        "enum": [
          "Left",
          "Center",
          "Right"
        ],
        "type": "string"
      },
      "PadesMeasurementUnits": {
        "enum": [
          "Centimeters",
          "PdfPoints"
        ],
        "type": "string"
      },
      "PadesPageOptimizationModel": {
        "type": "object",
        "properties": {
          "paperSize": {
            "$ref": "#/components/schemas/PaperSizes"
          },
          "customPaperSize": {
            "$ref": "#/components/schemas/PadesSizeModel"
          },
          "pageOrientation": {
            "$ref": "#/components/schemas/PageOrientations"
          }
        },
        "additionalProperties": false
      },
      "PadesSignatureModel": {
        "type": "object",
        "properties": {
          "signers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PadesSignerModel"
            },
            "nullable": true
          },
          "auditPackage": {
            "$ref": "#/components/schemas/FileModel"
          },
          "bStamp": {
            "$ref": "#/components/schemas/SignatureBStampModel"
          }
        },
        "additionalProperties": false
      },
      "PadesSignaturePostRequestV1": {
        "required": [
          "pdfToSign"
        ],
        "type": "object",
        "properties": {
          "pdfToSign": {
            "type": "string",
            "format": "byte"
          },
          "visualRepresentation": {
            "$ref": "#/components/schemas/PadesVisualRepresentationModel"
          },
          "pdfMarks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PdfMarkModel"
            },
            "nullable": true
          },
          "bypassMarksIfSigned": {
            "type": "boolean"
          },
          "measurementUnits": {
            "$ref": "#/components/schemas/PadesMeasurementUnits"
          },
          "pageOptimization": {
            "$ref": "#/components/schemas/PadesPageOptimizationModel"
          },
          "customSignatureFieldName": {
            "type": "string",
            "nullable": true
          },
          "certificationLevel": {
            "$ref": "#/components/schemas/PadesCertificationLevel"
          },
          "reason": {
            "type": "string",
            "nullable": true
          },
          "certificate": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "signaturePolicyId": {
            "type": "string",
            "format": "uuid"
          },
          "securityContextId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "callbackArgument": {
            "type": "string",
            "nullable": true
          },
          "ignoreRevocationStatusUnknown": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PadesSignaturePostRequestV2": {
        "required": [
          "pdfToSign"
        ],
        "type": "object",
        "properties": {
          "pdfToSign": {
            "$ref": "#/components/schemas/FileModel"
          },
          "visualRepresentation": {
            "$ref": "#/components/schemas/PadesVisualRepresentationModel"
          },
          "pdfMarks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PdfMarkModel"
            },
            "nullable": true
          },
          "bypassMarksIfSigned": {
            "type": "boolean"
          },
          "measurementUnits": {
            "$ref": "#/components/schemas/PadesMeasurementUnits"
          },
          "pageOptimization": {
            "$ref": "#/components/schemas/PadesPageOptimizationModel"
          },
          "customSignatureFieldName": {
            "type": "string",
            "nullable": true
          },
          "certificationLevel": {
            "$ref": "#/components/schemas/PadesCertificationLevel"
          },
          "reason": {
            "type": "string",
            "nullable": true
          },
          "certificate": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "signaturePolicyId": {
            "type": "string",
            "format": "uuid"
          },
          "securityContextId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "callbackArgument": {
            "type": "string",
            "nullable": true
          },
          "ignoreRevocationStatusUnknown": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PadesSignaturePostResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "nullable": true
          },
          "certificate": {
            "$ref": "#/components/schemas/CertificateModel"
          },
          "toSignData": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "toSignHash": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "digestAlgorithmOid": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PadesSignaturePostSignedBytesRequest": {
        "type": "object",
        "properties": {
          "signature": {
            "type": "string",
            "format": "byte",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PadesSignaturePostSignedBytesResponse": {
        "type": "object",
        "properties": {
          "signedPdf": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "callbackArgument": {
            "type": "string",
            "nullable": true
          },
          "certificate": {
            "$ref": "#/components/schemas/CertificateModel"
          }
        },
        "additionalProperties": false
      },
      "PadesSignerModel": {
        "type": "object",
        "properties": {
          "isDocumentTimestamp": {
            "type": "boolean"
          },
          "signatureFieldName": {
            "type": "string",
            "nullable": true
          },
          "hasLtv": {
            "type": "boolean"
          },
          "messageDigest": {
            "$ref": "#/components/schemas/DigestAlgorithmAndValueModel"
          },
          "signature": {
            "$ref": "#/components/schemas/SignatureAlgorithmAndValueModel"
          },
          "signaturePolicy": {
            "$ref": "#/components/schemas/SignaturePolicyIdentifierModel"
          },
          "certificate": {
            "$ref": "#/components/schemas/CertificateModel"
          },
          "signingTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "certifiedDateReference": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "timestamps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CadesTimestampModel"
            },
            "nullable": true
          },
          "validationResults": {
            "$ref": "#/components/schemas/ValidationResultsModel"
          },
          "commitmentType": {
            "$ref": "#/components/schemas/CommitmentTypeModel"
          },
          "bStamp": {
            "$ref": "#/components/schemas/SignerBStampModel"
          }
        },
        "additionalProperties": false
      },
      "PadesSizeModel": {
        "type": "object",
        "properties": {
          "height": {
            "type": "number",
            "format": "double"
          },
          "width": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "PadesTextHorizontalAlign": {
        "enum": [
          "Left",
          "Right"
        ],
        "type": "string"
      },
      "PadesVerticalAlign": {
        "enum": [
          "Top",
          "Center",
          "Bottom"
        ],
        "type": "string"
      },
      "PadesVisualAutoPositioningModel": {
        "required": [
          "container",
          "signatureRectangleSize"
        ],
        "type": "object",
        "properties": {
          "container": {
            "$ref": "#/components/schemas/PadesVisualRectangleModel"
          },
          "signatureRectangleSize": {
            "$ref": "#/components/schemas/PadesSizeModel"
          },
          "horizontalDirection": {
            "$ref": "#/components/schemas/AutoPositioningHorizontalDirections"
          },
          "verticalDirection": {
            "$ref": "#/components/schemas/AutoPositioningVerticalDirections"
          },
          "rowSpacing": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "PadesVisualImageModel": {
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/ResourceContentOrReference"
          },
          "opacity": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "horizontalAlign": {
            "$ref": "#/components/schemas/PadesHorizontalAlign"
          },
          "verticalAlign": {
            "$ref": "#/components/schemas/PadesVerticalAlign"
          }
        },
        "additionalProperties": false
      },
      "PadesVisualPositioningModel": {
        "type": "object",
        "properties": {
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "measurementUnits": {
            "$ref": "#/components/schemas/PadesMeasurementUnits"
          },
          "pageOptimization": {
            "$ref": "#/components/schemas/PadesPageOptimizationModel"
          },
          "auto": {
            "$ref": "#/components/schemas/PadesVisualAutoPositioningModel"
          },
          "manual": {
            "$ref": "#/components/schemas/PadesVisualRectangleModel"
          }
        },
        "additionalProperties": false
      },
      "PadesVisualRectangleModel": {
        "type": "object",
        "properties": {
          "left": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "top": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "right": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "bottom": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "width": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "height": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PadesVisualRepresentationModel": {
        "required": [
          "position"
        ],
        "type": "object",
        "properties": {
          "text": {
            "$ref": "#/components/schemas/PadesVisualTextModel"
          },
          "image": {
            "$ref": "#/components/schemas/PadesVisualImageModel"
          },
          "position": {
            "$ref": "#/components/schemas/PadesVisualPositioningModel"
          }
        },
        "additionalProperties": false
      },
      "PadesVisualTextModel": {
        "type": "object",
        "properties": {
          "fontSize": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "includeSigningTime": {
            "type": "boolean"
          },
          "horizontalAlign": {
            "$ref": "#/components/schemas/PadesTextHorizontalAlign"
          },
          "container": {
            "$ref": "#/components/schemas/PadesVisualRectangleModel"
          }
        },
        "additionalProperties": false
      },
      "PageOrientations": {
        "enum": [
          "Auto",
          "Portrait",
          "Landscape"
        ],
        "type": "string"
      },
      "PaperSizes": {
        "enum": [
          "Custom",
          "A0",
          "A1",
          "A2",
          "A3",
          "A4",
          "A5",
          "A6",
          "A7",
          "A8",
          "Letter",
          "Legal",
          "Ledger"
        ],
        "type": "string"
      },
      "PdfAddMarksRequest": {
        "required": [
          "file",
          "marks"
        ],
        "type": "object",
        "properties": {
          "file": {
            "$ref": "#/components/schemas/FileModel"
          },
          "marks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PdfMarkModel"
            }
          },
          "abortIfSigned": {
            "type": "boolean"
          },
          "measurementUnits": {
            "$ref": "#/components/schemas/PadesMeasurementUnits"
          },
          "pageOptimization": {
            "$ref": "#/components/schemas/PadesPageOptimizationModel"
          },
          "forceBlobResult": {
            "type": "boolean"
          },
          "preserveSignaturesVisualRepresentation": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "PdfAddMarksResponse": {
        "type": "object",
        "properties": {
          "file": {
            "$ref": "#/components/schemas/FileModel"
          }
        },
        "additionalProperties": false
      },
      "PdfMarkElementModel": {
        "type": "object",
        "properties": {
          "elementType": {
            "$ref": "#/components/schemas/PdfMarkElementType"
          },
          "relativeContainer": {
            "$ref": "#/components/schemas/PadesVisualRectangleModel"
          },
          "rotation": {
            "type": "integer",
            "format": "int32"
          },
          "textSections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PdfTextSectionModel"
            },
            "nullable": true
          },
          "image": {
            "$ref": "#/components/schemas/PdfMarkImageModel"
          },
          "qrCodeData": {
            "type": "string",
            "nullable": true
          },
          "qrCodeDrawQuietZones": {
            "type": "boolean",
            "nullable": true
          },
          "align": {
            "$ref": "#/components/schemas/PadesHorizontalAlign"
          },
          "verticalAlign": {
            "$ref": "#/components/schemas/PadesVerticalAlign"
          },
          "opacity": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PdfMarkElementType": {
        "enum": [
          "Text",
          "Image",
          "QRCode"
        ],
        "type": "string"
      },
      "PdfMarkImageModel": {
        "type": "object",
        "properties": {
          "opacity": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "resource": {
            "$ref": "#/components/schemas/ResourceContentOrReference"
          }
        },
        "additionalProperties": false
      },
      "PdfMarkModel": {
        "required": [
          "container",
          "elements"
        ],
        "type": "object",
        "properties": {
          "container": {
            "$ref": "#/components/schemas/PadesVisualRectangleModel"
          },
          "borderWidth": {
            "type": "number",
            "format": "double"
          },
          "borderColor": {
            "$ref": "#/components/schemas/ColorModel"
          },
          "backgroundColor": {
            "$ref": "#/components/schemas/ColorModel"
          },
          "elements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PdfMarkElementModel"
            }
          },
          "pageOption": {
            "$ref": "#/components/schemas/PdfMarkPageOptions"
          },
          "pageOptionNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PdfMarkPageOptions": {
        "enum": [
          "AllPages",
          "SinglePage",
          "SinglePageFromEnd",
          "NewPage"
        ],
        "type": "string"
      },
      "PdfSignatureOptions": {
        "type": "object",
        "properties": {
          "visualRepresentation": {
            "$ref": "#/components/schemas/PadesVisualRepresentationModel"
          },
          "measurementUnits": {
            "$ref": "#/components/schemas/PadesMeasurementUnits"
          },
          "pageOptimization": {
            "$ref": "#/components/schemas/PadesPageOptimizationModel"
          }
        },
        "additionalProperties": false
      },
      "PdfTextSectionModel": {
        "required": [
          "text"
        ],
        "type": "object",
        "properties": {
          "text": {
            "minLength": 1,
            "type": "string"
          },
          "style": {
            "$ref": "#/components/schemas/PdfTextStyle"
          },
          "color": {
            "$ref": "#/components/schemas/ColorModel"
          },
          "fontSize": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PdfTextStyle": {
        "enum": [
          "Normal",
          "Bold",
          "Italic"
        ],
        "type": "string"
      },
      "PkiBrazilCertificateModel": {
        "type": "object",
        "properties": {
          "certificateType": {
            "$ref": "#/components/schemas/PkiBrazilCertificateTypes"
          },
          "cpf": {
            "type": "string",
            "nullable": true
          },
          "cnpj": {
            "type": "string",
            "nullable": true
          },
          "responsavel": {
            "type": "string",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "nullable": true
          },
          "companyName": {
            "type": "string",
            "nullable": true
          },
          "oabUF": {
            "type": "string",
            "nullable": true
          },
          "oabNumero": {
            "type": "string",
            "nullable": true
          },
          "rgEmissor": {
            "type": "string",
            "nullable": true
          },
          "rgEmissorUF": {
            "type": "string",
            "nullable": true
          },
          "rgNumero": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PkiBrazilCertificateTypes": {
        "enum": [
          "Unknown",
          "A1",
          "A2",
          "A3",
          "A4",
          "S1",
          "S2",
          "S3",
          "S4",
          "T3",
          "T4"
        ],
        "type": "string"
      },
      "PkiItalyCertificateModel": {
        "type": "object",
        "properties": {
          "certificateType": {
            "$ref": "#/components/schemas/PkiItalyCertificateTypes"
          },
          "codiceFiscale": {
            "type": "string",
            "nullable": true
          },
          "idCarta": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PkiItalyCertificateTypes": {
        "enum": [
          "Undefined",
          "Cns",
          "DigitalSignature"
        ],
        "type": "string"
      },
      "PrepareAuthenticationRequest": {
        "type": "object",
        "properties": {
          "securityContextId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "ignoreRevocationStatusUnknown": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PrepareAuthenticationResponse": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "nullable": true
          },
          "toSignHash": {
            "$ref": "#/components/schemas/DigestAlgorithmAndValueModel"
          }
        },
        "additionalProperties": false
      },
      "PrepareSignatureFailures": {
        "enum": [
          "PdfAlreadySigned",
          "CorruptedPdf",
          "CertificateValidationFailed"
        ],
        "type": "string"
      },
      "PrepareSignatureRequest": {
        "required": [
          "certificate",
          "file"
        ],
        "type": "object",
        "properties": {
          "file": {
            "$ref": "#/components/schemas/FileReferenceModel"
          },
          "certificate": {
            "$ref": "#/components/schemas/CertificateReferenceModel"
          },
          "documentKey": {
            "type": "string",
            "nullable": true
          },
          "securityContextId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "signatureType": {
            "$ref": "#/components/schemas/SignatureTypes"
          },
          "cmsSignatureOptions": {
            "$ref": "#/components/schemas/CmsSignatureOptions"
          },
          "pdfSignatureOptions": {
            "$ref": "#/components/schemas/PdfSignatureOptions"
          },
          "xmlSignatureOptions": {
            "$ref": "#/components/schemas/XmlSignatureOptions"
          }
        },
        "additionalProperties": false
      },
      "PrepareSignatureResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "failure": {
            "$ref": "#/components/schemas/PrepareSignatureFailures"
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "toSignHash": {
            "$ref": "#/components/schemas/DigestAlgorithmAndValueModel"
          },
          "validationResults": {
            "$ref": "#/components/schemas/ValidationResultsModel"
          },
          "certificate": {
            "$ref": "#/components/schemas/CertificateModel"
          }
        },
        "additionalProperties": false
      },
      "ResourceContentOrReference": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "nullable": true
          },
          "content": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "mimeType": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RoleAttributeModel": {
        "type": "object",
        "properties": {
          "authority": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GeneralNameModel"
            },
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "alias": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SessionCompletionStatus": {
        "type": "object",
        "properties": {
          "completed": {
            "type": "boolean"
          },
          "progress": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "SignatureAlgorithmAndValueModel": {
        "type": "object",
        "properties": {
          "algorithmIdentifier": {
            "$ref": "#/components/schemas/SignatureAlgorithmIdentifier"
          },
          "value": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "hexValue": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SignatureAlgorithmIdentifier": {
        "type": "object",
        "properties": {
          "algorithm": {
            "$ref": "#/components/schemas/SignatureAlgorithms"
          }
        },
        "additionalProperties": false
      },
      "SignatureAlgorithms": {
        "enum": [
          "MD5WithRSA",
          "SHA1WithRSA",
          "SHA256WithRSA",
          "SHA384WithRSA",
          "SHA512WithRSA"
        ],
        "type": "string"
      },
      "SignatureBStampModel": {
        "type": "object",
        "properties": {
          "documentDigests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DigestAlgorithmAndValueModel"
            },
            "nullable": true
          },
          "indexDigests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DigestAlgorithmAndValueModel"
            },
            "nullable": true
          },
          "indexFile": {
            "$ref": "#/components/schemas/FileModel"
          },
          "blockchain": {
            "$ref": "#/components/schemas/Blockchains"
          },
          "transactionId": {
            "type": "string",
            "nullable": true
          },
          "blockNumber": {
            "type": "integer",
            "format": "int64"
          },
          "blockDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "SignaturePolicyIdentifierModel": {
        "type": "object",
        "properties": {
          "digest": {
            "$ref": "#/components/schemas/DigestAlgorithmAndValueModel"
          },
          "oid": {
            "type": "string",
            "nullable": true
          },
          "uri": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SignatureResultModel": {
        "type": "object",
        "properties": {
          "signatureFile": {
            "$ref": "#/components/schemas/FileModel"
          },
          "callbackArgument": {
            "type": "string",
            "nullable": true
          },
          "certificate": {
            "$ref": "#/components/schemas/CertificateModel"
          }
        },
        "additionalProperties": false
      },
      "SignatureSessionDocumentData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "file": {
            "$ref": "#/components/schemas/FileReferenceModel"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "nullable": true
          },
          "documentKey": {
            "type": "string",
            "nullable": true
          },
          "signatureType": {
            "$ref": "#/components/schemas/SignatureTypes"
          },
          "pdfSignatureOptions": {
            "$ref": "#/components/schemas/PdfSignatureOptions"
          },
          "cmsSignatureOptions": {
            "$ref": "#/components/schemas/CmsSignatureOptions"
          }
        },
        "additionalProperties": false
      },
      "SignatureSessionDocumentSummary": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/DocumentStatus"
          },
          "dateSigned": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "key": {
            "type": "string",
            "nullable": true
          },
          "formattedKey": {
            "type": "string",
            "nullable": true
          },
          "originalFile": {
            "$ref": "#/components/schemas/DocumentFileModel"
          },
          "markedFile": {
            "$ref": "#/components/schemas/DocumentFileModel"
          },
          "signedFile": {
            "$ref": "#/components/schemas/DocumentFileModel"
          },
          "signatureType": {
            "$ref": "#/components/schemas/SignatureTypes"
          },
          "availableUntil": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SignatureSessionModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "$ref": "#/components/schemas/SignatureSessionStatus"
          },
          "processingErrorCode": {
            "type": "string",
            "nullable": true
          },
          "callbackArgument": {
            "type": "string",
            "nullable": true
          },
          "signerCertificate": {
            "$ref": "#/components/schemas/CertificateModel"
          },
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SignatureSessionDocumentSummary"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SignatureSessionStatus": {
        "enum": [
          "Pending",
          "Processing",
          "Completed",
          "UserCancelled",
          "Expired",
          "ProcessingError"
        ],
        "type": "string"
      },
      "SignatureTypes": {
        "enum": [
          "Pdf",
          "Cms",
          "Xml"
        ],
        "type": "string"
      },
      "SignerBStampModel": {
        "type": "object",
        "properties": {
          "signatureDigest": {
            "$ref": "#/components/schemas/DigestAlgorithmAndValueModel"
          },
          "crlsDigests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DigestAlgorithmAndValueModel"
            },
            "nullable": true
          },
          "certificateDigests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DigestAlgorithmAndValueModel"
            },
            "nullable": true
          },
          "blockchain": {
            "$ref": "#/components/schemas/Blockchains"
          },
          "transactionId": {
            "type": "string",
            "nullable": true
          },
          "transactionDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "SignerModel": {
        "type": "object",
        "properties": {
          "messageDigest": {
            "$ref": "#/components/schemas/DigestAlgorithmAndValueModel"
          },
          "signature": {
            "$ref": "#/components/schemas/SignatureAlgorithmAndValueModel"
          },
          "signaturePolicy": {
            "$ref": "#/components/schemas/SignaturePolicyIdentifierModel"
          },
          "signingTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "certifiedDateReference": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "timestamps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CadesTimestampModel"
            },
            "nullable": true
          },
          "isDocumentTimestamp": {
            "type": "boolean"
          },
          "signatureFieldName": {
            "type": "string",
            "nullable": true
          },
          "validationResults": {
            "$ref": "#/components/schemas/ValidationResultsModel"
          },
          "hasLtv": {
            "type": "boolean",
            "nullable": true
          },
          "xmlSignedEntityType": {
            "$ref": "#/components/schemas/XmlSignedEntityTypes"
          },
          "xmlSignedElement": {
            "$ref": "#/components/schemas/XmlElementModel"
          },
          "attributeCertificates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttributeCertificateModel"
            },
            "nullable": true
          },
          "certificate": {
            "$ref": "#/components/schemas/CertificateModel"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "SignerSummary": {
        "type": "object",
        "properties": {
          "certificate": {
            "$ref": "#/components/schemas/CertificateSummary"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "StampPdfRequest": {
        "required": [
          "file"
        ],
        "type": "object",
        "properties": {
          "file": {
            "$ref": "#/components/schemas/FileReferenceModel"
          },
          "timestampTier": {
            "type": "string",
            "nullable": true
          },
          "customSignatureFieldName": {
            "maxLength": 100,
            "pattern": "^[^.]*$",
            "type": "string",
            "nullable": true
          },
          "reason": {
            "maxLength": 1024,
            "type": "string",
            "nullable": true
          },
          "forceBlobResult": {
            "type": "boolean"
          },
          "visualRepresentation": {
            "$ref": "#/components/schemas/PadesVisualRepresentationModel"
          }
        },
        "additionalProperties": false
      },
      "StampPdfResponse": {
        "type": "object",
        "properties": {
          "file": {
            "$ref": "#/components/schemas/FileReferenceModel"
          }
        },
        "additionalProperties": false
      },
      "TimestampIssueResponse": {
        "type": "object",
        "properties": {
          "encodedValue": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "info": {
            "$ref": "#/components/schemas/CadesTimestampModel"
          }
        },
        "additionalProperties": false
      },
      "ValidationItemModel": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ValidationItemTypes"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "innerValidationResults": {
            "$ref": "#/components/schemas/ValidationResultsModel"
          }
        },
        "additionalProperties": false
      },
      "ValidationItemTypes": {
        "enum": [
          "Success",
          "CertificateNotYetValid",
          "CertificateExpired",
          "CertificateRevoked",
          "CertificateIssuerNotFound",
          "CertificateRevocationStatusUnknown",
          "CertificateChainRootNotTrusted",
          "InvalidCertificateSignature",
          "DecodeError",
          "RequiredSignedAttributeMissing",
          "ForbiddenSignedAttributePresent",
          "RequiredUnsignedAttributeMissing",
          "ForbiddenUnsignedAttributePresent",
          "ContentTypeMismatch",
          "MessageDigestMismatch",
          "SigningCertificateDigestMismatch",
          "SignatureAlgorithmValidationFailed",
          "RevocationDataIssuedBeforeGracePeriod",
          "UncertifiedDateReference",
          "SignaturePolicyMismatch",
          "SigningTimeOutOfCertificateValidity",
          "UnknownSignedAttributesPresent",
          "UnknownUnsignedAttributesPresent",
          "TimestampWithMoreThanOneSigner",
          "TimestampMessageImprintMismatch",
          "TimestampValidationException",
          "CompleteReferencesMismatch",
          "InvalidSignatureTimestamp",
          "InvalidReferencesTimestamp",
          "InvalidArchiveTimestamp",
          "InvalidKeyUsage",
          "InvalidOcspResponse",
          "UnauthorizedIssuer",
          "UnknownRootTrustStatus",
          "InvalidTsl",
          "InvalidCrl",
          "CertificateIssuerValid",
          "CertificateIssuerInvalid",
          "CertificateValidationFailed",
          "SignatureVulnerableToSignerSubstitution",
          "InvalidXmlSignatureSchema",
          "XmlDSigCoreValidationFailed",
          "SignatureTimestampIgnored",
          "InvalidCertificationPathLen",
          "SigningCertificateNotFound",
          "UnauthorizedACIssuer",
          "AlgorithmNotAllowed",
          "UnacceptableSignaturePolicy"
        ],
        "type": "string"
      },
      "ValidationResultsModel": {
        "type": "object",
        "properties": {
          "passedChecks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationItemModel"
            },
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationItemModel"
            },
            "nullable": true
          },
          "warnings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationItemModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WebhookEventModel": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/WebhookEventTypes"
          },
          "document": {
            "$ref": "#/components/schemas/DocumentModel"
          }
        },
        "additionalProperties": false
      },
      "WebhookEventTypes": {
        "enum": [
          "DocumentSignatureCompleted"
        ],
        "type": "string"
      },
      "XmlAttributeModel": {
        "type": "object",
        "properties": {
          "localName": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          },
          "namespaceUri": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "XmlElementLocationModel": {
        "type": "object",
        "properties": {
          "xPath": {
            "type": "string",
            "nullable": true
          },
          "namespaces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NamespaceModel"
            },
            "nullable": true
          },
          "insertionOption": {
            "$ref": "#/components/schemas/XmlInsertionOptions"
          }
        },
        "additionalProperties": false
      },
      "XmlElementModel": {
        "type": "object",
        "properties": {
          "localName": {
            "type": "string",
            "nullable": true
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/XmlAttributeModel"
            },
            "nullable": true
          },
          "namespaceUri": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "XmlElementSignaturePostRequest": {
        "required": [
          "elementToSignId"
        ],
        "type": "object",
        "properties": {
          "elementToSignId": {
            "minLength": 1,
            "type": "string"
          },
          "idResolutionTable": {
            "$ref": "#/components/schemas/XmlIdResolutionTableModel"
          },
          "xml": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "signatureElementId": {
            "type": "string",
            "nullable": true
          },
          "signatureElementLocation": {
            "$ref": "#/components/schemas/XmlElementLocationModel"
          },
          "certificate": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "signaturePolicyId": {
            "type": "string",
            "format": "uuid"
          },
          "securityContextId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "callbackArgument": {
            "type": "string",
            "nullable": true
          },
          "ignoreRevocationStatusUnknown": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "XmlIdAttributeModel": {
        "required": [
          "attribute",
          "element"
        ],
        "type": "object",
        "properties": {
          "element": {
            "$ref": "#/components/schemas/XmlNodeNameModel"
          },
          "attribute": {
            "$ref": "#/components/schemas/XmlNodeNameModel"
          }
        },
        "additionalProperties": false
      },
      "XmlIdResolutionTableModel": {
        "type": "object",
        "properties": {
          "includeXmlIdAttribute": {
            "type": "boolean",
            "nullable": true
          },
          "elementIdAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/XmlIdAttributeModel"
            },
            "nullable": true
          },
          "globalIdAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/XmlNodeNameModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "XmlInsertionOptions": {
        "enum": [
          "AppendChild",
          "PrependChild",
          "AppendSibling",
          "PrependSibling"
        ],
        "type": "string"
      },
      "XmlNodeNameModel": {
        "required": [
          "localName"
        ],
        "type": "object",
        "properties": {
          "localName": {
            "minLength": 1,
            "type": "string"
          },
          "namespace": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "XmlSignatureModel": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/XmlSignedEntityTypes"
          },
          "signedElement": {
            "$ref": "#/components/schemas/XmlElementModel"
          },
          "signature": {
            "$ref": "#/components/schemas/SignatureAlgorithmAndValueModel"
          },
          "signaturePolicy": {
            "$ref": "#/components/schemas/SignaturePolicyIdentifierModel"
          },
          "certificate": {
            "$ref": "#/components/schemas/CertificateModel"
          },
          "signingTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "certifiedDateReference": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "timestamps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CadesTimestampModel"
            },
            "nullable": true
          },
          "validationResults": {
            "$ref": "#/components/schemas/ValidationResultsModel"
          },
          "bStamp": {
            "$ref": "#/components/schemas/SignerBStampModel"
          }
        },
        "additionalProperties": false
      },
      "XmlSignatureOptions": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/XmlSignatureTypes"
          },
          "elementToSignId": {
            "type": "string",
            "nullable": true
          },
          "signatureElementLocation": {
            "$ref": "#/components/schemas/XmlElementLocationModel"
          }
        },
        "additionalProperties": false
      },
      "XmlSignaturePostResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "nullable": true
          },
          "certificate": {
            "$ref": "#/components/schemas/CertificateModel"
          },
          "toSignData": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "toSignHash": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "digestAlgorithmOid": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "XmlSignaturePostSignedBytesRequest": {
        "type": "object",
        "properties": {
          "signature": {
            "type": "string",
            "format": "byte",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "XmlSignaturePostSignedBytesResponse": {
        "type": "object",
        "properties": {
          "signedXml": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "callbackArgument": {
            "type": "string",
            "nullable": true
          },
          "certificate": {
            "$ref": "#/components/schemas/CertificateModel"
          }
        },
        "additionalProperties": false
      },
      "XmlSignatureResponseModel": {
        "type": "object",
        "properties": {
          "signatures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/XmlSignatureModel"
            },
            "nullable": true
          },
          "auditPackage": {
            "$ref": "#/components/schemas/FileModel"
          },
          "bStamp": {
            "$ref": "#/components/schemas/SignatureBStampModel"
          }
        },
        "additionalProperties": false
      },
      "XmlSignatureTypes": {
        "enum": [
          "XmlElement",
          "FullXml",
          "OnlineResource",
          "DetachedResource"
        ],
        "type": "string"
      },
      "XmlSignedEntityTypes": {
        "enum": [
          "FullXml",
          "XmlElement",
          "DetachedResource"
        ],
        "type": "string"
      }
    }
  }
}